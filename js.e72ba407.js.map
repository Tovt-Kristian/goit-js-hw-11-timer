{"version":3,"sources":["js/index.js"],"names":["daysTimer","document","querySelector","hoursTimer","minsTimer","secTimer","console","log","Timer","finishDate","markup","interval","deltaTime","setInterval","currentTime","Date","now","days","pad","Math","floor","hours","mins","secs","insertValues","value","String","padStart","d","h","m","s","textContent","myTimer","start"],"mappings":";AAsFA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAtFA,IAAMA,EAAYC,SAASC,cAAc,2BACnCC,EAAaF,SAASC,cAAc,4BACpCE,EAAYH,SAASC,cAAc,2BACnCG,EAAWJ,SAASC,cAAc,2BACxCI,QAAQC,IAAIP,GACZM,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAENG,IAAAA,EAAAA,WACUC,SAAAA,EAAAA,EAAYC,GAAQ,EAAA,KAAA,GACvBA,KAAAA,OAASA,EACTD,KAAAA,WAAaA,EACbE,KAAAA,SAAW,KACXC,KAAAA,UAAY,EACrBN,QAAQC,IAAI,KAAKE,YAuErB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QApEI,MAAA,WAAQ,IAAA,EAAA,KACHE,KAAAA,SAAWE,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MAEvB,EAAKJ,UAAY,EAAKH,WAAaK,EAE7BG,IAAAA,EAAO,EAAKC,IAAIC,KAAKC,MAAM,EAAKR,UAAa,QAC7CS,EAAQ,EAAKH,IAAIC,KAAKC,MAAO,EAAKR,UAAa,MAAyB,OACxEU,EAAO,EAAKJ,IAAIC,KAAKC,MAAO,EAAKR,UAAa,KAAoB,MAClEW,EAAO,EAAKL,IAAIC,KAAKC,MAAO,EAAKR,UAAa,IAAc,MAElE,EAAKY,aAAaP,EAAMI,EAAOC,EAAMC,IAClC,OAwDX,CAAA,IAAA,MArDI,MAAA,SAAIE,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAoDzC,CAAA,IAAA,eAjDI,MAAA,SAAaC,EAAGC,EAAGC,EAAGC,GACqC,IAAA,EAAA,KAAKrB,OAApDV,EAAAA,EAAAA,UAAWG,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,SAC1CL,EAAUgC,YAAcJ,EACxBzB,EAAW6B,YAAcH,EACzBzB,EAAU4B,YAAcF,EACxBzB,EAAS2B,YAAcD,MA4C/B,EA7EMvB,GAoCAyB,EAAU,IAAIzB,EAAM,IAAIO,KAAK,gBAAiB,CAChDf,UAAAA,EACAG,WAAAA,EACAC,UAAAA,EACAC,SAAAA,IAEJC,QAAQC,IAAI0B,GACZA,EAAQC","file":"js.e72ba407.js","sourceRoot":"..\\src","sourcesContent":["const daysTimer = document.querySelector('span[data-value=\"days\"]');\r\nconst hoursTimer = document.querySelector('span[data-value=\"hours\"]');\r\nconst minsTimer = document.querySelector('span[data-value=\"mins\"]');\r\nconst secTimer = document.querySelector('span[data-value=\"secs\"]');\r\nconsole.log(daysTimer);\r\nconsole.log(hoursTimer);\r\nconsole.log(minsTimer);\r\nconsole.log(secTimer);\r\n\r\nclass Timer {\r\n    constructor(finishDate, markup) {\r\n        this.markup = markup;\r\n        this.finishDate = finishDate;\r\n        this.interval = null;\r\n        this.deltaTime = 0;\r\n    console.log(this.finishDate);\r\n    }\r\n\r\n    start() {\r\n    this.interval = setInterval(() => {\r\n        let currentTime = Date.now();\r\n\r\n        this.deltaTime = this.finishDate - currentTime;\r\n\r\n        const days = this.pad(Math.floor(this.deltaTime / (1000 * 60 * 60 * 24)));\r\n        const hours = this.pad(Math.floor((this.deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.pad(Math.floor((this.deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.pad(Math.floor((this.deltaTime % (1000 * 60)) / 1000));\r\n\r\n        this.insertValues(days, hours, mins, secs);\r\n        }, 1000);\r\n    }\r\n\r\n    pad(value) {\r\n        return String(value).padStart(2, '0');\r\n    }\r\n    \r\n    insertValues(d, h, m, s) {\r\n        const { daysTimer, hoursTimer, minsTimer, secTimer } = this.markup;\r\n        daysTimer.textContent = d;\r\n        hoursTimer.textContent = h;\r\n        minsTimer.textContent = m;\r\n        secTimer.textContent = s;\r\n    }\r\n}\r\nconst myTimer = new Timer(new Date('oct 16, 2022'), {\r\n    daysTimer,\r\n    hoursTimer,\r\n    minsTimer,\r\n    secTimer,\r\n});\r\nconsole.log(myTimer);\r\nmyTimer.start();\r\n\r\n// Плагин это класс CountdownTimer, экземпляр которого создает новый таймер с настройками.\r\n\r\n// new CountdownTimer({\r\n//   selector: '#timer-1',\r\n//   targetDate: new Date('Jul 17, 2019'),\r\n// });\r\n\r\n// Для подсчета значений используй следующие готовые формулы, где time - разница между targetDate и текущей датой.\r\n\r\n/*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}